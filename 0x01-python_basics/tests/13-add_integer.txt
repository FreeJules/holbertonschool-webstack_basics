This is a doctest based regression suite for 13-add_integer.txt
Each '>>>' line is run as if in a python shell, and counts as a test.
The next line, if not '>>>' is the expected output of the previous line.
If anything doesn't match exactly (including trailing spaces), the test fails.

>>> add_integer = __import__('13-add_integer').add_integer
>>> add_integer(1, 3)
4
>>> add_integer(1.6789, 3.6789)
5
>>> add_integer(1.3789, 3.2789)
4
>>> add_integer('hi', 3.6789)
Traceback (most recent call last):
	  ...
TypeError: a must be an integer
>>> add_integer(4.5, 'hello')
Traceback (most recent call last):
	  ...
TypeError: b must be an integer
>>> add_integer('hi', 'hello')
Traceback (most recent call last):
	  ...
TypeError: a must be an integer
>>> add_integer([1,2], 'hello')
Traceback (most recent call last):
	  ...
TypeError: a must be an integer
>>> add_integer((1,2), 'hello')
Traceback (most recent call last):
	  ...
TypeError: a must be an integer
>>> add_integer({1:2}, 'hello')
Traceback (most recent call last):
	  ...
TypeError: a must be an integer
>>> add_integer(2.3, [1,2])
Traceback (most recent call last):
	  ...
TypeError: b must be an integer
>>> add_integer(2.3, (1,2))
Traceback (most recent call last):
	  ...
TypeError: b must be an integer
>>> add_integer(2, {1:2})
Traceback (most recent call last):
	  ...
TypeError: b must be an integer
>>> add_integer(None, 4)
Traceback (most recent call last):
	  ...
TypeError: a must be an integer
>>> add_integer(3, None)
Traceback (most recent call last):
	  ...
TypeError: b must be an integer
>>> add_integer(3, -9999999999999999999999999999999999)
-9999999999999999999999999999999996
>>> add_integer(3, 9999999999999999999999999999999999)
10000000000000000000000000000000002
>>> add_integer(3, add_integer(9, -14))
-2
>>> add_integer(3, add_integer(9, 'test'))
Traceback (most recent call last):
	  ...
TypeError: b must be an integer
